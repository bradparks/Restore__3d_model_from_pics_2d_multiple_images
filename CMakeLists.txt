CMAKE_MINIMUM_REQUIRED(VERSION 2.8)
PROJECT(restore)

# Set include path and project sources
SET(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} "${PROJECT_SOURCE_DIR}/cmake")
SET(LIBRARY_OUTPUT_PATH "${PROJECT_SOURCE_DIR}/lib")
SET(EXECUTABLE_OUTPUT_PATH "${PROJECT_SOURCE_DIR}/bin")
INCLUDE_DIRECTORIES("${PROJECT_SOURCE_DIR}/src")

# Source and test files
FILE(GLOB_RECURSE PROJECT_SOURCES
    ${PROJECT_SOURCE_DIR}/src/*.cpp
    ${PROJECT_SOURCE_DIR}/src/*.hpp
    ${PROJECT_SOURCE_DIR}/src/*.inl)
FILE(GLOB_RECURSE TEST_SOURCES
    ${PROJECT_SOURCE_DIR}/test/*.cpp
    ${PROJECT_SOURCE_DIR}/test/*.hpp)

# Required packages
FIND_PACKAGE(OpenCV REQUIRED core imgproc calib3d highgui)
FIND_PACKAGE(Boost COMPONENTS filesystem system REQUIRED)
FIND_PACKAGE(VTK REQUIRED NO_MODULE)
INCLUDE_DIRECTORIES(SYSTEM ${VTK_INCLUDE_DIRS})
SET_PROPERTY(DIRECTORY APPEND PROPERTY COMPILE_DEFINITIONS ${VTK_DEFINITIONS})

# Enable C++11, debug per default and compiler specific features
SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} --std=c++11")
SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${CMAKE_CXX_FLAGS_DEBUG}")
IF("${CMAKE_CXX_COMPILER_ID}" STREQUAL "Clang" OR
   "${CMAKE_CXX_COMPILER_ID}" STREQUAL "GNU")
    SET(COVERAGE_AVAILABLE TRUE)
    INCLUDE(CodeCoverage)
ENDIF()

# Add build targets
ADD_SUBDIRECTORY(src)
ADD_SUBDIRECTORY(thirdparty)
ADD_SUBDIRECTORY(test)
ADD_SUBDIRECTORY(tools)
INCLUDE(DocumentationTargets)
