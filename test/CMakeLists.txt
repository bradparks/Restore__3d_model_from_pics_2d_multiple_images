# Aggregate all test sources
FILE(GLOB_RECURSE TEST_SOURCES ${CMAKE_CURRENT_SOURCE_DIR}/*.cpp)

# Add coverage flags for test executable, if enabled
IF(USE_CODE_COVERAGE AND CMAKE_COMPILER_IS_GNUCXX)
    SET(CMAKE_CXX_FLAGS 
        "${CMAKE_CXX_FLAGS} -g -O0 -fprofile-arcs -ftest-coverage")
ENDIF()

# Build test executables
INCLUDE_DIRECTORIES(SYSTEM "${gtest_SOURCE_DIR}/include")
SET(TEST_BIN "${PROJECT_NAME}-unittests")
ADD_EXECUTABLE(${TEST_BIN} ${TEST_SOURCES})
SET_PROPERTY(TARGET ${TEST_BIN} PROPERTY CXX_STANDARD 11)
SET_PROPERTY(TARGET ${TEST_BIN} PROPERTY CXX_STANDARD_REQUIRED ON)
INCLUDE_DIRECTORIES(SYSTEM ${VTK_INCLUDE_DIRS})
SET_PROPERTY(DIRECTORY APPEND PROPERTY COMPILE_DEFINITIONS ${VTK_DEFINITIONS})
TARGET_LINK_LIBRARIES(${TEST_BIN} gtest_main 
    ${OpenCV_LIBS}
    ${VTK_LIBRARIES}
    ${PROJECT_NAME}_calib
    ${PROJECT_NAME}_common 
    ${PROJECT_NAME}_filter
    ${PROJECT_NAME}_io
    ${PROJECT_NAME}_math
    ${PROJECT_NAME}_render)

# Setup unit testing
ADD_CUSTOM_TARGET(tests ${CMAKE_RUNTIME_OUTPUT_DIRECTORY}/${TEST_BIN}
    DEPENDS ${TEST_BIN} COMMENT "Executing unit tests..."
    SOURCES ${TEST_SOURCES})

IF(USE_CODE_COVERAGE AND CMAKE_COMPILER_IS_GNUCXX)
    SETUP_TARGET_FOR_COVERAGE(${PROJECT_NAME}-coverage ${TEST_BIN} coverage)
ENDIF()
